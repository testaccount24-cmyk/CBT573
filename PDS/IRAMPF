         TITLE 'IRAMPF - LIST AUX SLOT USAGE BY ASID'
*        PRINT NOGEN
*                                                                    *
* DESCRIPTION:                                                       *
*   MPF EXIT FOR LISTING HIGHEST AUX SLOT USERS GROUPED 5 AT A TIME. *
*   THIS FUNTIONALITY ADDED BY SHANE GINNANE TO BASE CODE (ASIDLIST) *
*   ORIGINALLY POSTED BY MARK ZELDEN.                                *
*                                                                    *
* USAGE:                                                             *
*   DESIGNED TO BE USED WHEN AN IRA200E AND/OR IRA201E MESSAGE       *
*   ISSUES.                                                          *
*   MAY GIVE AN INDICATION OF POTENTIAL CANDIDATES FOR TERMINATION.  *
*                                                                    *
* ATTRIBUTES:                                                        *
*   AMODE(31), RMODE(24), AC(1) REENTRANT                            *
*                                                                    *
* MACROS USED:                                                       *
*   MODESET, SETLOCK                                                 *
*   WTO (BRANCH ENTRY DUE TO POTENTIAL FOR LOCAL LOCK BEING HELD)    *
*   WTO - MULTILINE                                                  *
*   WTOR                                                             *
*                                                                    *
* MODULES CALLED:                                                    *
*   NONE                                                             *
*                                                                    *
* REQUIREMENTS:                                                      *
*   AC(1) DUE TO OBTAINING LOCKS. IF LOCKS ARE UNOBTAINABLE,         *
*   PROCESSING CONTINUES AFTER ISSUING AN INFORMATIONAL WTO.         *
*   POTENTIALLY THE SLOT COUNT COULD CHANGE WHILST THE CODE IS       *
*   RUNNING IN THIS STATE, BUT THE VARIANCE SHOULD BE NEGLIGIBLE.    *
*                                                                    *
*   IF MORE FIELDS ARE NEEDED IN THE ASENTRY DSECT, ADD THEN AFTER   *
*   THE FIELD "ASTSLOT", AND BEFORE FIELD "ASENTL".                  *
*   THIS WILL ALLOW ASMAXENT TO RESOLVE CORRECTLY                    *
*                                                                    *
***
*   MAINT:                                                           *
*     DUE TO THE FACT THAT MPF EXITS NEED TO BE RE-ENTRANT, CODE     *
*     REWORKED TO ACCOMPLISH THIS.                   SG. 31/01/2001  *
*                                                                    *
*     FIXED S0F8-8 BY MOVING MODESET                 SG. 17/10/2001  *
*                                                                    *
*                                                                    *
***
*
*  REGISTER EQUATES AND USAGE
*
***
R00      EQU   0                  LINKAGE REGISTER
R01      EQU   1                  WORK REG
R02      EQU   2                  WORK REG
R03      EQU   3                  POINTS TO PARM / MAX # ASVT ENTRIES
R04      EQU   4                  WORK - POINTS TO CURRENT ADDR IN ASVT
R05      EQU   5                  WORK REG
R06      EQU   6                  POINTS TO START OF DATA AREA
R07      EQU   7                  ALLOCATED ASID COUNTER
R08      EQU   8                  ASID COUNTER
R09      EQU   9                  BASE REG FOR ASVT
R10      EQU   10                 BASE REG FOR ASCB
R11      EQU   11                 BASE REG FOR ASSB
R12      EQU   12                 BASE REGISTER
R14      EQU   14                 LINKAGE REGISTER (RETURN ADDRESS)
R15      EQU   15                 LINKAGE REGISTER (ENTRY POINT)
*
IRAMPF   CSECT
IRAMPF   AMODE 31
IRAMPF   RMODE 24
         B     START-IRAMPF(R15)
         DC    AL1(START-*)
         DC    C'IRAMPF &SYSDATE &SYSTIME '
START    BAKR  R14,R00            BRANCH AND STACK (LINKAGE STACK)
         LR    R12,R15            SET UP ADDRESSABILITY
         USING IRAMPF,R12         SET UP BASE REGISTER
*******************************************************************
* POINT TO ASVT
*******************************************************************
         MODESET KEY=ZERO,MODE=SUP
         L     R09,CVTPTR         POINT TO CVT  - X'10'
         L     R09,CVTASVT-CVT(,R09)  POINT TO ASVT
         USING ASVT,R09           MAP ASVT
         LA    R04,ASVTENTY       POINT TO FIRST ENTRY IN TABLE
         L     R03,ASVTMAXU       LOAD MAX NUMBER OF ENTRIES
         XR    R08,R08            CLEAR ASID COUNTER
         XR    R07,R07            CLEAR ASSIGNED ASID COUNTER
         L     R06,=A(MY_AREA)    FIND THAT DATA
         LA    R06,TRANSL(,R06)   SKIP THE "TRANSIENT" AREA
         USING ASENTRY,R06
*
         LTR   R15,R15                 O.K. ??
         BNZ   NOLOCKS                 NO ?? - TELL THE WORLD
         SETLOCK OBTAIN,                                               X
               TYPE=LOCAL,             LOCAL LOCK                      X
               MODE=COND,                                              X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=LOCAL
         C     R15,=F'8'               O.K. ??
         BNL   NOLOCKS                 NO ?? - TELL THE WORLD
         SETLOCK OBTAIN,                                               X
               TYPE=CMS,               CROSS-MEMORY SERVICES           X
               MODE=COND,                                              X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=CMS
         C     R15,=F'8'               O.K. ??
         BL    ASVTLOOP                NO ?? - WHAT THE HELL
NOLOCKS  EQU   *
         WTO   '****  UNABLE TO OBTAINS LOCK(S) - NUMBERS MAY BE MARGINX
               ALLY INACCURATE',LINKAGE=BRANCH
*
ASVTLOOP EQU   *
*******************************************************************
* THIS ROUTINE CHECKS EACH ASVT ENTRY.
* IF THE HIGH ORDER BIT IS ON, THE ENTRY IS THE ADDRESS OF THE
* NEXT AVAILABLE ASID (OR THE LAST ENTRY IF ZEROS).
*******************************************************************
         LA    R08,1(,R08)        BUMP ASID COUNTER
         TM    0(R04),ASVTAVAL    IS THIS AN ASSIGNED  ASCB
         BNO   CHKASCB            YES, BRANCH
         LA    R04,4(,R04)        NO, POINT TO NEXT ENTRY IN ASVT
         BCT   R03,ASVTLOOP       GO CHECK NEXT ASVT ENTRY
         B     SORTEM             NO MORE ENTRIES - BRANCH
*******************************************************************
* CHECK ASCB FOR JOB OR START/LOGON/MOUNT
*******************************************************************
CHKASCB  EQU   *
         L     R10,0(R04)         POINT TO ASCB
         USING ASCB,R10           MAP IT
         L     R05,ASCBJBNI       POINT TO JOBNAME
         C     R05,=F'0'          WAS THIS A START/MOUNT/LOGON ?
         BE    NOTAJOB            YES, BRANCH
         MVC   ASNAME,0(R05)      MOVE ASNAME IN
         B     SKIPSNAM
NOTAJOB  EQU   *
         L     R05,ASCBJBNS       POINT TO START/MOUNT/LOGON NAME
         C     R05,=F'0'          NAME PRESENT ?
         BNE   MOVESNAM           YES, BRANCH
         MVC   ASNAME,=C'*STRTING' MOVE 'STRTING' INTO ASNAME
         B     SKIPSNAM
MOVESNAM EQU   *
         MVC   ASNAME,0(R05)      MOVE ASNAME IN
SKIPSNAM EQU   *
         LA    R07,1(,R07)        ADD 1 TO TOTAL ACTIVE COUNTER
         ST    R08,ASASID         SAVE ASID OF THIS ASCB
         L     R11,ASCBASSB       ASSB PTR
         USING ASSB,R11
         L     R00,ASSBVSC        # VIO AUX PAGES
         A     R00,ASSBNVSC       ADD # NON-VIO AUX PAGES
         ST    R00,ASTSLOT        SAVE TOTAL SLOT COUNT
         MVC   ASVIO,ASSBVSC      SAVE # VIO AUX PAGES
         MVC   ASNVIO,ASSBNVSC    SAVE # NON-VIO AUX PAGES
         LA    R04,4(,R04)        POINT TO NEXT ENTRY IN ASVT
         LA    R06,ASENTL(,R06)   SKIP TO NEXT ENTRY IN TABLE
         C     R07,ASMAXENT       AS MANY AS WE CAN ACCOMODATE ??
         BNL   SORTEM             YEP - PULL THE PIN
         BCT   R03,ASVTLOOP       GO CHECK NEXT ASVT ENTRY
*******************************************************************
* SUB ROUTINE TO SORT BY TOTAL USED SLOTS
*******************************************************************
SORTEM   EQU   *
UNLOCK   SETLOCK RELEASE,         LET THE LOCKS GO                     X
               TYPE=ALL,               LOCAL AND CMS                   X
               REGS=USE,               DO NOT CHANGE R11-R13           X
               RELATED=UNLOCK
*
         DROP  R11
         L     R04,=A(MY_AREA)        FIND THAT DATA
         USING TRANS,R04
         XC    UPDATED,UPDATED    SET UP FLAG BYTE
         ST    R07,ACTCOUNT       SAVE THE TOTAL ACTIVE ASIDS
STARTSRT EQU   *
         L     R07,ACTCOUNT       GET THE TOTAL ACTIVE ASIDS
         BCTR  R07,R00            DEC FOR COUNTER
         L     R06,=A(MY_AREA)    FIND THAT DATA
         LA    R06,TRANSL(,R06)   SKIP THE "TRANSIENT" AREA
         NI    UPDATED,X'FF'-DIRTY  TURN OFF DIRTY BIT
BUBBLE   EQU   *
         CLC   ASTSLOT,ASENTL+20(R06)  N TOTSLOTS > (N+1) TOTSLOTS ???
         BNL   SKIPSWAP           NO
         XC    0(ASENTL,R06),ASENTL(R06)
         XC    ASENTL(ASENTL,R06),0(R06)
         XC    0(ASENTL,R06),ASENTL(R06)
         OI    UPDATED,DIRTY      SHOW SOMETHING DONE
SKIPSWAP EQU   *
         LA    R06,ASENTL(,R06)
         BCT   R07,BUBBLE
         TM    UPDATED,DIRTY      ALEADY SORTED
         BNO   SORTED             YEP
         B     STARTSRT
SORTED   EQU   *
*******************************************************************
* AT THIS POINT SORTED, SO DISPLAY 5 AT A TIME
*******************************************************************
         L     R06,=A(MY_AREA)    FIND THAT DATA
         LA    R06,TRANSL(,R06)   SKIP THE "TRANSIENT" AREA
         L     R07,ACTCOUNT       GET THE TOTAL ACTIVE ASIDS
         MVC   M1,WTOLEN
         MVC   M2,WTOLEN
         MVC   M3,WTOLEN
         MVC   M4,WTOLEN
         MVC   M5,WTOLEN
NEXTLOT  EQU   *
         C     R07,=F'0'          ALL DONE ???
         BE    RETURN             YES, GOODBYE
         MVI   M1TEXT,C' '
         MVC   M1TEXT+1(TEMPL-1),M1TEXT
         MVI   M2TEXT,C' '
         MVC   M2TEXT+1(TEMPL-1),M2TEXT
         MVI   M3TEXT,C' '
         MVC   M3TEXT+1(TEMPL-1),M2TEXT
         MVI   M4TEXT,C' '
         MVC   M4TEXT+1(TEMPL-1),M2TEXT
         MVI   M5TEXT,C' '
         MVC   M5TEXT+1(TEMPL-1),M2TEXT
         LA    R02,M1TEXT
         LA    R01,5
MSGLOOP  EQU   *
         MVC   0(TEMPL,R02),TEMPLATE
         MVC   6(8,R02),ASNAME    MOVE HEX ASID
         MVC   WORK3(2),ASASID+2  STORE "HEX" ASID
         UNPK  WORK5,WORK3        ADD ZONES
         TR    WORK5(4),HEXTAB-C'0'   TRANSLATE TO CHARACTERS
         MVC   22(4,R02),WORK5    MOVE HEX ASID
*
         L     R11,ASTSLOT
         CVD   R11,CVDWORK        CONVERT TO DECIMAL
         ED    40(16,R02),CVDWORK     UNPACK AND EDIT
         LA    R02,L'M1TEXT+2(R02)
         LA    R06,ASENTL(,R06)
         BCTR  R07,R00            REDUCE ASID COUNT
         C     R07,=F'0'          ALL DONE ???
         BE    SETUP              YES, ISSUE WTO
         BCT   R01,MSGLOOP
SETUP    EQU   *
         XR    0,0                     CLEAR R0
         WTO   TEXT=((T1,D),(M1,D),(M2,D),(M3,D),(M4,D),(M5,DE)),      X
               DESC=1
         LR    R11,R01
WTOR     EQU   *
         XC    ECB,ECB
         XC    REPLY,REPLY
         DROP  R09,R10
         LA    R09,REPLY
         LA    R10,ECB
         WTOR  '*** N(EXT) OR F(INISH)   *****',(R09),1,(R10)
         WAIT  ECB=ECB
         DOM   MSG=(11)                ... AND DO IT AGAIN
         CLI   REPLY,C'N'
         BE    NEXTLOT
         CLI   REPLY,C'F'
         BNE   WTOR
*====================================================
RETURN   EQU   *
         MODESET KEY=NZERO,MODE=PROB
         LA    R15,0               SET RETURN CODE TO ZERO
         PR                       PROGRAM RETURN (LINKAGE STACK)
         EJECT
* ====================================================================
ASMAXENT DC    A((32768-TRANSL)/ASENTL)     HOW MANY CAN WE HANDLE ???
TEMPLATE DC    C'TASK: ????????, ASID: ',X'40202120'
         DC    C', SLOT COUNT: ',X'40202020202020202020202020202120'
TEMPL    EQU   *-TEMPLATE
WTOLEN   DC    AL2(TEMPL)
T1       DC    AL2(L'T1TEXT)
T1TEXT   DC    CL50'*****    HIGHEST AUX SLOT USERS         *****'
* ====================================================================
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATION TABLE FOR HEX TO CHAR
         LTORG
TRANS    DSECT                     MAPPER FOR TRANSIENT WORK AREAS
ECB      DS    A                   WTOR REPLY ECB
REPLY    DS    C                   WTOR REPLY
ACTCOUNT DS    F
UPDATED  DS    XL1
DIRTY    EQU   X'80'
CVDWORK  DS    D                  WORK AREA FOR CVD
WORK3    DS    CL3                WORK AREA FOR HEX TO CHAR
WORK5    DS    CL5                WORK AREA FOR HEX TO CHAR
M1       DS    AL2
M1TEXT   DS    CL(TEMPL)
M2       DS    AL2
M2TEXT   DS    CL(TEMPL)
M3       DS    AL2
M3TEXT   DS    CL(TEMPL)
M4       DS    AL2
M4TEXT   DS    CL(TEMPL)
M5       DS    AL2
M5TEXT   DS    CL(TEMPL)
         DS    0D
TRANSL   EQU   *-TRANS             LENGTH OF TRANSIENT AREA
         SPACE
ASENTRY  DSECT                     MAPPER FOR WORK AREA
ASNAME   DS    D                   ADDRESS SPACE NAME
ASASID   DS    F                   ADDRESS SPACE ID
ASVIO    DS    F                   ADDRESS SPACE VIO SLOT COUNT
ASNVIO   DS    F                   ADDRESS SPACE NVIO SLOT COUNT
ASTSLOT  DS    F                   ADDRESS SPACE TOTAL SLOT COUNT
ASENTL   EQU   *-ASENTRY           LENGTH OF TABLE ENTRY
         CVT DSECT=YES
         IHAPSA
         IHAASVT
         IHAASCB
         IHAASSB
         DROP  12
         CSECT
MY_AREA  DS    32768X              32K BUFFER - CAREFUL WITH THIS !!
         END
